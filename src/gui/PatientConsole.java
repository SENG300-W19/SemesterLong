package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import data.Account;
import data.Appointment;
import users.Doctor;
import users.Patient;
import users.User;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;

public class PatientConsole {
    private JPanel panel1;
    private JTabbedPane tabbedPane1;
    private JButton signOutButton;
    private JTable table1;
    private JTable table2;
    private static DefaultTableModel scheduleModel = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    private static DefaultTableModel doctorsModel = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    private static JFrame frame = new JFrame("Patient Console");
    private final static String[] title = new String[]{
            "Date", "Start", "Finish", "Doctor", "Approved"
    };
    private final static String[] docTitle = new String[]{
            "First Name", "Last Name", "Specialty"
    };
    private User acc;

    public PatientConsole(User acc) {
        setAcc(acc);
        $$$setupUI$$$();
        scheduleModel.setColumnIdentifiers(title);
        table1.setModel(scheduleModel);
//        table2.setModel(doctorsModel);
        init();
        signOutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (e.getSource() == signOutButton) {
                    try {
                        int choice = JOptionPane.showConfirmDialog(null, "Sign out?");
                        if (choice == 0) {
                            Account.writeToFile();
                            frame.dispose();
                            Login login = new Login();
                            login.init();
                        }
                    } catch (Exception e1) {
                        e1.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Issues signing out");
                    }
                }
            }
        });

        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                super.windowClosed(e);
                try {
                    Account.writeToFile();
                    System.exit(0);
                } catch (Exception e2) {
                    System.out.println("Improper Close");
                }
            }
        });
    }

    private void init() {
        frame.setContentPane(panel1);
        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);

        // add appointments to list
        for (Appointment app : acc.getSchedule().list) {
            boolean toAdd = true;
            for (int i = 0; i < scheduleModel.getRowCount(); i++) {
                if (app.getStart().toString() == scheduleModel.getValueAt(i, 0)) {
                    toAdd = false;
                    break;
                }
            }
            if (toAdd) {
                Object[] rowData = new Object[]{
                        app.getStart().toLocalDate().toString(), app.getStart().toLocalTime().toString(),
                        app.getFinish().toLocalTime().toString(), app.getApptDoctor().toString(), !app.isRequest()
                };
                scheduleModel.addRow(rowData);
            }
        }

        // add doctors to list
        for (User doc : new Patient(acc).getDoctors()) {
            boolean toAdd = true;
            for (int i = 0; i < doctorsModel.getRowCount(); i++) {
                if ((doc.getFirstName() == doctorsModel.getValueAt(i, 0)) && (doc.getLastName() == doctorsModel.getValueAt(i, 1))) {
                    toAdd = false;
                    break;
                }
            }
            if (toAdd) {
                Doctor doctor = new Doctor(acc);
                Object[] data = new Object[]{
                        doctor.getFirstName(), doctor.getLastName(), doctor.getSpecialty()
                };
                doctorsModel.addRow(data);
            }
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1 = new JTabbedPane();
        tabbedPane1.setTabLayoutPolicy(0);
        tabbedPane1.setTabPlacement(1);
        panel1.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(800, 400), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Appointments", panel2);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        scrollPane1.setViewportView(table1);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        signOutButton = new JButton();
        signOutButton.setText("Sign Out");
        panel3.add(signOutButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    public User getAcc() {
        return acc;
    }

    public void setAcc(User acc) {
        this.acc = acc;
    }
}
